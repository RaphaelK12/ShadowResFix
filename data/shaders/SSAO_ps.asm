//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   sampler2D deferredLightDownsampleDepthSampler;
//   float4 gDeferredLightColourAndIntensity;
//   float4 gDeferredProjParams;
//   float g_fSSAOKernelScale;
//   float4 globalScreenSize;
//
//
// Registers:
//
//   Name                                Reg   Size
//   ----------------------------------- ----- ----
//   globalScreenSize                    c210      1
//   gDeferredLightColourAndIntensity    c117     1
//   gDeferredProjParams                 c119     1
//   g_fSSAOKernelScale                  c137     1
//   deferredLightDownsampleDepthSampler s1      1
//

    ps_3_0
    def c0, 37, 3, -0.25, 1
    def c1, 0.159154937, 0.5, 6.28318548, -3.14159274
    def c2, 0.75, -0.5, 0.5, 0
    def c3, -0.5, 0.5, 0, -2
    def c4, 1.00010002, 4.5, 14.9069996, 0.5
	
    // def c117     ,1, 1, 1, 1   //   gDeferredLightColourAndIntensity    
    // def c119     ,1, 1, 1, 1   //   gDeferredProjParams                 
    // def c137     ,1, 1, 1, 1   //   g_fSSAOKernelScale                  
    def c117, 1, 1, 1, 1          //   gDeferredLightColourAndIntensity    
    def c119, 0.5, 0.25, 1, 1     //   gDeferredProjParams                 
    def c137, 0.5, 1, 1, 1        //   g_fSSAOKernelScale                  
    // def c210, 1280, 720, 0.00078125, 0.01388888
	
	
    dcl_texcoord v0.xy
    dcl_2d s1
    mov r0.y, c3.y
    rcp r1.y, c210.x
    rcp r1.z, c210.y
    mad r1.xw, r1.zyzy, c3.zyzw, v0.yyzx
    add r2.xy, r1.xwzw, c3.x
    texld r3, r1.wxzw, s1
	
		// rcp r30.w, c128.x
		// mul r30.w, r30.w, c128.y		
	
		// pow r30.x, r30.w, r3.x
		// mul r30.x, r30.x, c128.y
	
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r3.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r3, r20.y, r20.z        // Linear depth
        mul r3.x, c211.y, r3.x
		
    mul r0.xz, r2.xyyw, c119.yyxw
    texld r2, v0, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r2.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r2, r20.y, r20.z        // Linear depth
        mul r2.x, c211.y, r2.x
		mov r30.y, r2.y
		
    add r1.xw, c3.x, v0.xyzy
    mul r4.xy, r1.xwzw, c119
    mov r4.z, c3.y
    mul r2.yzw, r2.x, r4.xzxy
    mad r0.xyz, r0, -r3.x, r2.wyzw
    mov r3.y, c3.y
    mad r1.xw, r1.zyzy, c3_abs.zyzw, v0.yyzx
    add r5.xy, r1.xwzw, c3.x
    texld r6, r1.wxzw, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r6.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r6, r20.y, r20.z        // Linear depth
        mul r6.x, c211.y, r6.x

    mul r3.xz, r5.xyyw, c119.yyxw
    mad r3.xyz, r3, r6.x, -r2.wyzw
    add r0.w, r0_abs.y, -r3_abs.y
    cmp r0.xyz, r0.w, r3, r0
    mov r3.x, c3.y
    mad r1.xw, r1.yyzz, c3.zyzw, v0.xyzy
    add r5.xy, r1.xwzw, c3.x
    texld r6, r1.xwzw, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r6.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r6, r20.y, r20.z        // Linear depth
        mul r6.x, c211.y, r6.x

    mul r3.yz, r5.xxyw, c119.xxyw
    mad r3.xyz, r3, -r6.x, r2.yzww
    mad r1.xw, r1.yyzz, c3_abs.zyzw, v0.xyzy
    add r1.yz, r1, r1
    add r5.xy, r1.xwzw, c3.x
    texld r6, r1.xwzw, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r6.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r6, r20.y, r20.z        // Linear depth
        mul r6.x, c211.y, r6.x

    mul r5.yz, r5.xxyw, c119.xxyw
    mov r5.x, c3.y
    mad r2.yzw, r5.xxyz, r6.x, -r2
    add r0.w, -r2_abs.y, r3_abs.x
    cmp r2.yzw, r0.w, r2, r3.xxyz
    mul r3.xyz, r0, r2.yzww
    mad r0.xyz, r2.wyzw, r0.yzxw, -r3
    nrm r3.xyz, r0
    rcp r0.x, r2.x
    mul r0.x, r0.x, c4.x
    mul_sat r0.y, r0.x, c137.x
    mad r0.y, r0.y, c0.x, c0.y
    mul r0.yz, r0.y, r1
    mov r1.xy, c210
    mul r1, r1.xyxy, c4.yzww
    dp2add r0.w, v0, r1, c3.z
    mad r0.w, r0.w, c1.x, c1.y
    frc r0.w, r0.w
    mad r0.w, r0.w, c1.z, c1.w
    sincos r5.xy, r0.w
    mul r5.xy, r0.yzzw, r5.yxzw
    mov r5.z, -r5.x
    add r0.yz, r5, v0.xxyw
    mul r0.yz, r0, r1.xzww
    frc r1.xy, r0.yzzw
    add r0.yz, r0, -r1.xxyw
    add r0.yz, r0, c3.y
    rcp r1.x, r1.z
    rcp r1.y, r1.w
    mul r2.yz, r0, r1.xxyw
    mad r0.yz, r0, r1.xxyw, c3.x
    mul r6.xy, r0.yzzw, c119
    texld r7, r2.yzzw, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r7.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r7, r20.y, r20.z        // Linear depth
        mul r7.x, c211.y, r7.x

    mad r0.yz, r5.xxyw, c0.z, v0.xxyw
    mad r5, r5.xyyx, c2.xxyz, v0.xyxy
    mul r5, r1.zwzw, r5
    mul r0.yz, r0, r1.xzww
    frc r1.zw, r0.xyyz
    add r0.yz, r0, -r1.xzww
    add r0.yz, r0, c3.y
    mul r1.zw, r1.xyxy, r0.xyyz
    mad r0.yz, r0, r1.xxyw, c3.x
    mul r8.xy, r0.yzzw, c119
    texld r9, r1.zwzw, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r9.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r9, r20.y, r20.z        // Linear depth
        mul r9.x, c211.y, r9.x

    mov r7.w, r9.x
    frc r9, r5
    add r5, r5, -r9
    add r5, r5, c3.y
    mul r9, r1.xyxy, r5
    mad r1, r5, r1.xyxy, c3.x
    texld r5, r9, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r5.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r5, r20.y, r20.z        // Linear depth
        mul r5.x, c211.y, r5.x

    texld r9, r9.zwzw, s1
		
        rcp r20.x, c128.x
        mul r20.x, r20.x, c128.y
        pow r20.x, r20.x, r9.x
        mul r20.x, r20.x, c128.x    // W_clip
        
        add r20.y, r20.x, -c128.x
        add r20.z, c128.y, -c128.x
        mul r20.y, r20.y, c128.y
        mul r20.z, r20.z, r20.x
        rcp r20.z, r20.z
        // mul r9, r20.y, r20.z        // Linear depth
        mul r9.x, c211.y, r9.x
		

    mov r7.z, r9.x
    mov r7.y, r5.x
    mul r0, r0.x, r7
    mov r6.z, c3.y
    mad r2.yzw, r6.xxyz, r0.x, -r4.xxyz
    dp3 r0.x, r2.yzww, r2.yzww
    rsq r0.x, r0.x
    mul r2.yzw, r0.x, r2
    rcp r5.x, r0.x
    dp3 r6.x, r2.yzww, r3
    mov r8.z, c3.y
    mad r2.yzw, r8.xxyz, r0.w, -r4.xxyz
    dp3 r0.x, r2.yzww, r2.yzww
    rsq r0.x, r0.x
    mul r2.yzw, r0.x, r2
    rcp r5.w, r0.x
    dp3 r6.w, r2.yzww, r3
    mul r7.xy, r1, c119
    mul r1.xy, r1.zwzw, c119
    mov r7.z, c3.y
    mad r0.xyw, r7.xyzz, r0.y, -r4.xyzz
    dp3 r1.w, r0.xyww, r0.xyww
    rsq r1.w, r1.w
    mul r0.xyw, r0, r1.w
    rcp r5.y, r1.w
    dp3 r6.y, r0.xyww, r3
    mov r1.z, c3.y
    mad r0.xyz, r1, r0.z, -r4
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul r0.xyz, r0.w, r0
    rcp r5.z, r0.w
    mul r1, r2.x, r5
    add r1, r1, r1
    dp3 r6.z, r0, r3
    add r0, -r6, c0.w
    max_sat r2, r1, r0
    dp4 r0.x, r2, -c0.z
    log r0.x, r0.x
    mul r0.x, r0.x, c117.w
    exp r31, r0.x
    mov r30.x, r31.x
	mov oC0, r30

// approximately 134 instruction slots used (9 texture, 125 arithmetic)

